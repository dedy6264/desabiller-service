package routes

import (
	"fmt"
	"log"
	"desabiller/configs"
	"desabiller/services"
	administrationservice "desabiller/services/administrationService"
	hierarchyservicego "desabiller/services/hierarchyService"
	productservice "desabiller/services/productService"
	trxservice "desabiller/services/trxService"
	vueservice "desabiller/services/vueService"
	"net/http"

	"github.com/labstack/echo"
	"github.com/labstack/echo/middleware"
)

func RoutesApi(services services.UsecaseService, e echo.Echo) {
	hierachySvc := hierarchyservicego.ApiHierarchy(services)
	productSvc := productservice.ApiProduct(services)
	admSvc := administrationservice.ApiAdministration(services)
	trxSvc := trxservice.NewApiTrxService(services)
	vueSvc := vueservice.NewApiVueService(services)

	open := e.Group("/open")
	{
		open.Use(middleware.CORSWithConfig(middleware.CORSConfig{
			AllowCredentials: true,
			AllowOrigins:     []string{"*"},
			AllowMethods:     []string{http.MethodGet, http.MethodPut, http.MethodPost, http.MethodDelete},
		}))
		open.POST("/login", admSvc.DeviceLogin)
		open.OPTIONS("/login", admSvc.DeviceLogin)
	}
	dvc := e.Group("/dvc")
	{
		dvc.Use(middleware.BodyDump(func(ctx echo.Context, b1, b2 []byte) {
			fmt.Println(":::::", ctx.Request().Header)
			fmt.Println(":::::", ctx.Request().RemoteAddr)
			fmt.Println(":::::", ctx.Request().UserAgent())
			fmt.Println(":::::", ctx)
		}))

		// dvc.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		// 	AllowCredentials: true,
		// 	AllowOrigins:     []string{"http://localhost:8080"},
		// 	AllowMethods:     []string{"GET", "POST", "OPTIONS", "PUT", "DELETE"},
		// 	AllowHeaders:     []string{"Authorization"},
		// }))
		// dvc.Use(middleware.JWT([]byte(configs.KEY)))

		//////////////
		dvc.Use(middleware.JWT([]byte(configs.KEY)))
		dvc.Use(middleware.CORSWithConfig(middleware.CORSConfig{
			AllowCredentials: true,
			AllowOrigins:     []string{"*"},
			AllowMethods:     []string{http.MethodGet, http.MethodPut, http.MethodPost, http.MethodDelete},
		}))
		dvc.Use(middleware.BodyDump(func(c echo.Context, reqBody, resBody []byte) {
			log.Println("[Start]")
			log.Println("EndPoint :", c.Path())
			log.Println("Header :", c.Request().Header)
			log.Println("Body :", string(reqBody))
			log.Println("Response :", string(resBody))
			log.Println("[End]")
		}))

		dvc.POST("/cekjwt", admSvc.CekJwt)
		{
			tRx := dvc.Group("/trx")
			tRx.POST("/inquiry", trxSvc.InquiryPos)
			tRx.POST("/payment", trxSvc.PaymentPos)
			tRx.POST("/cancel", trxSvc.InquiryPos)
		}
		{
			pPo := dvc.Group("/productpos")
			pPo.POST("/list", productSvc.GetListProductPos)
			pPo.OPTIONS("/list", productSvc.GetListProductPos)
			pPo.POST("/add", productSvc.AddProductPos)
			pPo.POST("/update", productSvc.UpdateProductPos)
			pPo.POST("/drop", productSvc.DropProductPos)
		}
		{
			pCa := dvc.Group("/productcategory")
			pCa.POST("/list", productSvc.GetListProductCategory)
			pCa.POST("/add", productSvc.AddProductCategory)
			pCa.POST("/update", productSvc.UpdateProductCategory)
			pCa.POST("/drop", productSvc.DropProductCategory)
		}
	}
	vue := e.Group("/vue")
	vue.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowCredentials: true,
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{http.MethodGet, http.MethodPut, http.MethodPost, http.MethodDelete},
	}))
	vue.Use(middleware.BodyDump(func(ctx echo.Context, b1, b2 []byte) {
		log.Println("IP From : ", ctx.Request().Host)
		log.Println("Path : ", ctx.Request().RemoteAddr)
		log.Println("Request Body : ", string(b1))
		log.Println("Response Body : ", string(b2))
		log.Println("Path : ", ctx.Path())
		log.Println("Header : ", ctx.Request().Header)
		log.Println("Method : ", ctx.Request().Method)
	}))
	vue.GET("/productList", vueSvc.GetProduct)
	vue.POST("/product/:id", vueSvc.GetProductSingle)

	dash := e.Group("/dash")
	{

		dash.Use(middleware.BodyDump(func(ctx echo.Context, b1, b2 []byte) {
			log.Println("IP From : ", ctx.Request().Host)
			log.Println("Path : ", ctx.Request().RemoteAddr)
			log.Println("Request Body : ", string(b1))
			log.Println("Response Body : ", string(b2))
			log.Println("Path : ", ctx.Path())
			log.Println("Header : ", ctx.Request().Header)
			log.Println("Method : ", ctx.Request().Method)

		}))
		dash.Use(middleware.CORSWithConfig(middleware.CORSConfig{
			AllowCredentials: true,
			AllowOrigins:     []string{"*"},
			AllowMethods:     []string{http.MethodGet, http.MethodPut, http.MethodPost, http.MethodDelete, http.MethodOptions},
		}))
		{
			cli := dash.Group("/client")
			cli.POST("/list", hierachySvc.GetListClient)
			cli.POST("/add", hierachySvc.AddClient)
			cli.POST("/drop", hierachySvc.DropClient)
			cli.POST("/update", hierachySvc.UpdateClient)
		}
		{
			mer := dash.Group("/merchant")
			mer.POST("/list", hierachySvc.GetListMerchant)
			mer.POST("/add", hierachySvc.AddMerchant)
			mer.POST("/drop", hierachySvc.DropMerchant)
			mer.POST("/update", hierachySvc.UpdateMerchant)
		}
		{
			mOu := dash.Group("/merchantoutlet")
			mOu.POST("/list", hierachySvc.GetListMerchantOutlet)
			mOu.POST("/add", hierachySvc.AddMerchantOutlet)
			mOu.POST("/drop", hierachySvc.DropMerchantOutlet)
			mOu.POST("/update", hierachySvc.UpdateMerchantOutlet)
		}
		{
			uOu := dash.Group("/useroutlet")
			uOu.POST("/list", hierachySvc.GetListUserOutlet)
			uOu.POST("/add", hierachySvc.AddUserOutlet)
			uOu.POST("/drop", hierachySvc.DropUserOutlet)
			uOu.POST("/update", hierachySvc.UpdateUserOutlet)
		}
		{
			uDe := dash.Group("/outletdevice")
			uDe.POST("/list", hierachySvc.GetListOutletDevice)
			uDe.POST("/add", hierachySvc.AddOutletDevice)
			uDe.POST("/drop", hierachySvc.DropOutletDevice)
			uDe.POST("/update", hierachySvc.UpdateOutletDevice)
		}
		{
			pTy := dash.Group("/producttype")
			pTy.POST("/list", productSvc.GetListProductType)
		}
		{
			pCa := dash.Group("/productcategory")
			pCa.POST("/list", productSvc.GetListProductCategory)
			pCa.POST("/add", productSvc.AddProductCategory)
			pCa.POST("/update", productSvc.UpdateProductCategory)
			pCa.POST("/drop", productSvc.DropProductCategory)
		}
		{
			pBp := dash.Group("/productbillerprovider")
			pBp.POST("/list", productSvc.GetListProductBillerProvider)
			pBp.POST("/add", productSvc.AddProductBillerProvider)
			pBp.POST("/update", productSvc.UpdateProductBillerProvider)
			pBp.POST("/drop", productSvc.DropProductBillerProvider)
		}
		{
			pBi := dash.Group("/productbiller")
			pBi.POST("/list", productSvc.GetListProductBiller)
			pBi.POST("/add", productSvc.AddProductBiller)
			pBi.POST("/update", productSvc.UpdateProductBiller)
			pBi.POST("/drop", productSvc.DropProductBiller)
		}
		{
			pPo := dash.Group("/productpos")
			pPo.POST("/list", productSvc.GetListProductPos)
			pPo.OPTIONS("/list", productSvc.GetListProductPos)
			pPo.POST("/add", productSvc.AddProductPos)
			pPo.OPTIONS("/add", productSvc.AddProductPos)
			pPo.POST("/update", productSvc.UpdateProductPos)
			pPo.POST("/drop", productSvc.DropProductPos)
		}
		{
			seg := dash.Group("/segment")
			seg.POST("/list", productSvc.GetListSegment)
			seg.POST("/add", productSvc.AddSegment)
			seg.POST("/update", productSvc.UpdateSegment)
			seg.POST("/drop", productSvc.DropSegment)
		}
		{
			sPr := dash.Group("/segmentproduct")
			sPr.POST("/list", productSvc.GetListSegmentProduct)
			sPr.POST("/add", productSvc.AddSegmentProduct)
			sPr.POST("/update", productSvc.UpdateSegmentProduct)
			sPr.POST("/drop", productSvc.DropSegmentProduct)
		}
		{
			pMd := dash.Group("/paymentmethod")
			pMd.POST("/list", productSvc.GetListPaymentMethod)
			pMd.POST("/add", productSvc.AddPaymentMethod)
			pMd.POST("/update", productSvc.UpdatePaymentMethod)
			pMd.POST("/drop", productSvc.DropPaymentMethod)
		}
		{
			pMc := dash.Group("/paymentmethodcategory")
			pMc.POST("/list", productSvc.GetListPaymentMethodCategory)
			pMc.POST("/add", productSvc.AddPaymentMethodCategory)
			pMc.POST("/update", productSvc.UpdatePaymentMethodCategory)
			pMc.POST("/drop", productSvc.DropPaymentMethodCategory)
		}
	}
}
